ls.diag()
makeARIMA()
?kmeans
iris
attach(iris)
head(iris)
str(iris)
iris
iris[,1:4]
kmeans.result=kmeans(iris[,1:4],3)
kmeans.result
iris
names(kmeans.result)
plot(Sepal.Length,Sepal.Width)
plot(Sepal.Length,Sepal.Width,col=kmeans.result$cluster)
kmeans.result$cluster
plot(Sepal.Length,Sepal.Width)
plot(Sepal.Length,Sepal.Width,col=kmeans.result$cluster)
points(iris$Species,kmeans.result$centers,)
points(iris$Species,kmeans.result$centers)
points(kmeans.result$centers,pch=8,col=1:3)
table(iris$Species,kmeans.result$cluster)
summary(iris)
hc<- hclust(dist(iris[,1:4]),method = "ward.D2")
hc
plot(hc,hang=-1,labels = iris$Species)
plot(hc,hang=-1,labels = iris$Species)
rect.hclust(hc,k=3)
groups<- cutree(hc,k=3)
groups
table(iris$Species,groups)
table(iris)
barplot(hc$height)
table(iris$Species,groups)
table(iris$Species,kmeans.result$cluster)
data=read.table("fromage.txt")
data
head(data)
data=read.table("fromage.txt",header = T,row.names = 1)
head(data)#on verifie que la table est bien une table bien structuré
plot(hc,hang=-1,labels = data[1,]
hc<- hclust(dist(data()),method = "ward.D2")
hc<- hclust(dist(data),method = "ward.D2")
plot(hc,hang=-1,labels = data[1,])
plot(hc,hang=-1)
?scale
?hclust
data2=scale(data)
hc<- hclust(dist(data))#hc<- hclust(dist(iris[,1:4]),method = "ward.D2")
plot(hc,hang=-1)
plot(hc,hang=-1)
hc
hc<- hclust(dist(iris[,1:4]),method = "ward.D2")
hc<- hclust(dist(iris[,1:4]),method = "ward.D2")
plot(hc,hang=-1)
source('/nfs/home/sasl/eleves/main/3600594/Bureau/Analyse De Donnees/TP3/ex2_tp3.R')
View(data2)
View(data2)
data=read.table("fromage.txt",header = T,row.names = 1)
head(data)#on verifie que la table est bien une table bien structuré
attach(data)
data2=scale(data)
hc<- hclust(dist(iris[,1:4]),method = "ward.D2")
par(mfrow=c(2,2))
plot(hc,hang=-1)
hc<- hclust(dist(iris[,1:4]),method = "single")
plot(hc,hang=-1)
hc<- hclust(dist(iris[,1:4]),method = "complete")
plot(hc,hang=-1)
hc<- hclust(dist(iris[,1:4]),method = "average")
plot(hc,hang=-1)
source('/nfs/home/sasl/eleves/main/3600594/Bureau/Analyse De Donnees/TP3/ex2_tp3.R')
data$Fromage
hc<- hclust(dist(data2),method = "ward.D2")
hc
par(mfrow=c(2,2))
par(mfrow=c(2,2))
par(mfrow=c(2,2))
par(mfrow=c(2,2))
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "single")
hc
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "complete")
hc
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "average")
hc
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "ward.D2")
plot(hc,hang=-1)
groups<- cutree(hc,k=3)
rect.hclust(hc,k=3)
plot(hc,hang=-1)
barplot(hc$height)
barplot(hc$height)
par(mfrow=c(2,2))
plot(hc,hang=-1)
barplot(hc$height)
par(mfrow=c(2,1))
hc
par(mfrow=c(2,1))
barplot(hc$height)
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "ward.D2")
par(mfrow=c(1,2))
barplot(hc$height)
plot(hc,hang=-1)
rect.hclust(hc,k=5)
groups<- cutree(hc,k=4)
groups5<- cutree(hc,k=5)
groups5
table(groups,groups)
table(groups,groups5)
data[groups5==1,]
colMeans(data[groups5==1,])
colMeans(data[groups5==1,])
colMeans(data[groups5==2,])
colMeans(data[groups5==3,])
colMeans(data[groups5==4,])
colMeans(data[groups5==5,])
which(groups5==5)
which(groups5==3)
table(iris$Species,groups)
iris
attach(iris)
head(iris)
str(iris)
kmeans.result=kmeans(iris[,1:4],3)
names(kmeans.result)
plot(Sepal.Length,Sepal.Width)
plot(Sepal.Length,Sepal.Width,col=kmeans.result$cluster)
points(kmeans.result$centers,pch=8,col=1:3)
table(iris$Species,kmeans.result$cluster)
summary(iris)
hc<- hclust(dist(iris[,1:4]),method = "ward.D2")
plot(hc,hang=-1,labels = iris$Species)
rect.hclust(hc,k=3)
groups<- cutree(hc,k=3)
groups
table(iris$Species,groups)
barplot(hc$height)
data=read.table("fromage.txt",header = T,row.names = 1)
head(data)#on verifie que la table est bien une table bien structuré
attach(data)
hc<- hclust(dist(data))#hc<- hclust(dist(data2),method = "ward.D2")
plot(hc,hang=-1)
data2=scale(data)
hc<- hclust(dist(data2),method = "ward.D2")
hc
par(mfrow=c(2,2))
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "ward.D2")
hc
par(mfrow=c(2,2))
par(mfrow=c(2,2))
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "single")#à evitetr
hc
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "complete")
hc
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "average")
hc
plot(hc,hang=-1)
hc<- hclust(dist(data2),method = "ward.D2")
par(mfrow=c(1,2))
barplot(hc$height)#pour determiner combien de groupe nous allons faire
plot(hc,hang=-1)
rect.hclust(hc,k=5)
groups<- cutree(hc,k=4)
groups5<- cutree(hc,k=5)
table(groups,groups5)
hc<- hclust(dist(data2),method = "ward.D2")
par(mfrow=c(1,2))
barplot(hc$height)#pour determiner combien de groupe nous allons faire
plot(hc,hang=-1)
rect.hclust(hc,k=5)
groups<- cutree(hc,k=4)
groups5<- cutree(hc,k=5)
table(groups,groups5)
data[groups5==1,]
?kmeans
kmeans.result=kmeans(data,5)
kmeans.result
kmeans.result$size
kmeans.result=kmeans(data,5)
kmeans.result$size
kmeans.result=kmeans(scale(data),5)#on scale pour centre-reduire les données
kmeans.result$size
data2=scale(data)
hc<- hclust(dist(data2))
hc
names(hc)
hc$labels
groups5<- cutree(hc,k=5)
groups5
groups5==1
groups5[1]
groups5[groups5==1]
which(groups5==3)
which(groups5==5)#les fromage qui se trouvent dans le groupe 5
?rep
gravity=list(colMeans(data[groups5==1,]),
colMeans(data[groups5==2,]),
colMeans(data[groups5==3,]),
colMeans(data[groups5==4,]),
colMeans(data[groups5==5,]))
means.result=kmeans(scale(data),centers = gravity,5)#on scale pour centre-reduire les données
gravity=c(colMeans(data[groups5==1,]),
colMeans(data[groups5==2,]),
colMeans(data[groups5==3,]),
colMeans(data[groups5==4,]),
colMeans(data[groups5==5,]))
means.result=kmeans(scale(data),centers = gravity,5)#on scale pour centre-reduire les données
gravity=c(colMeans(data[groups5==1,]),
colMeans(data2[groups5==2,]),
colMeans(data2[groups5==3,]),
colMeans(data2[groups5==4,]),
colMeans(data2[groups5==5,]))
means.result=kmeans(scale(data),centers = gravity,5)#on scale pour centre-reduire les données
gravity
c1=colMeans(data[groups5==1,])
c1=c1[-1,]
gravity[1]
gravity[1,]
gravity[1][1,]
gravity[1][1]
gravity[1][1,]
gravity[1][,]
gravity=rbind(colMeans(data[groups5==1,]),
colMeans(data2[groups5==2,]),
colMeans(data2[groups5==3,]),
colMeans(data2[groups5==4,]),
colMeans(data2[groups5==5,]))
gravity=rbind(colMeans(data[groups5==1,]),
colMeans(data2[groups5==2,]),
colMeans(data2[groups5==3,]),
colMeans(data2[groups5==4,]),
colMeans(data2[groups5==5,]))
gravity=rbind(colMeans(data[groups5==1,]),
colMeans(data2[groups5==2,]),
colMeans(data2[groups5==3,]),
colMeans(data2[groups5==4,]),
colMeans(data2[groups5==5,]))
gravity=rbind(gr1=colMeans(data[groups5==1,]),
gr2=colMeans(data2[groups5==2,]),
gr3=colMeans(data2[groups5==3,]),
gr4=colMeans(data2[groups5==4,]),
gr5=colMeans(data2[groups5==5,]))
gr1=colMeans(data[groups5==1,])
gr2=colMeans(data2[groups5==2,])
gr3=colMeans(data2[groups5==3,])
gr4=colMeans(data2[groups5==4,])
gr5=colMeans(data2[groups5==5,])
gravity=rbind(gr1,gr2)
gravity[
gravity
gravity
gravity
gravity=rbind(gr1,gr2,gr3,gr4,gr5)
gr4=colMeans(data2[groups5==4,])
colMeans(data[groups5==4,])
colMeans(data[groups5==5,])
colMeans(data[groups5==5,])
gr1=colMeans(data2[groups5==1,])
gr2=colMeans(data2[groups5==2,])
gr3=colMeans(data2[groups5==3,])
gr4=colMeans(data2[groups5==4,])
gr5=colMeans(data2[groups5==5,])
gravity=rbind(gr1,gr2,gr3,gr4,gr5)
data2=scale(data)
hc<- hclust(dist(data2))
hc$labels
groups5<- cutree(hc,k=5)
gr1=colMeans(data2[groups5==1,])
gr2=colMeans(data2[groups5==2,])
gr3=colMeans(data2[groups5==3,])
gr4=colMeans(data2[groups5==4,])
gr5=colMeans(data2[groups5==5,])
gravity=rbind(gr1,gr2,gr3,gr4,gr5)
hc<- hclust(dist(data2),method = "ward.D2")
hc$labels
groups5<- cutree(hc,k=5)
gr1=colMeans(data2[groups5==1,])
gr2=colMeans(data2[groups5==2,])
gr3=colMeans(data2[groups5==3,])
gr4=colMeans(data2[groups5==4,])
gr5=colMeans(data2[groups5==5,])
gravity=rbind(gr1,gr2,gr3,gr4,gr5)
means.result=kmeans(scale(data),centers = gravity,5)#on scale pour centre-reduire les données
kmeans.result$size
means.result=kmeans(scale(data),centers = gravity,5)#on scale pour centre-reduire les données
kmeans.result$size
means.result=kmeans(scale(data),centers = gravity,5)#on scale pour centre-reduire les données
kmeans.result$size
?kmeans*
?kmeans
?kmeans
gravity
kmeans.result$withinss
kmeans.result$tot.withinss
kmeans.result$betweenss
kmeans.result$totss
kmeans.result
kmeans.result$tot.withinss
sum(kmeans.result$withinss)
kmeans.result
kmeans.result$betweenss
kmeans.result$totss
means.result=kmeans(scale(data),nstart = 100,5)
means.result
kmeans.result$withinss#Inertie intra class pour chacune de class
kmeans.result$tot.withinss#sum(kmeans.result$withinss)  Inertie totale intra class
kmeans.result$betweenss#inertie inter-classe
kmeans.result$totss#(inertie totale)
means.result=kmeans(scale(data),nstart = 100,5)
means.result
kmeans.result$withinss#Inertie intra class pour chacune de class
kmeans.result$tot.withinss#sum(kmeans.result$withinss)  Inertie totale intra class
kmeans.result$betweenss#inertie inter-classe
kmeans.result$totss#(inertie totale)
table(groups5,kmeans.result$cluster)
table(kmeans.result$cluster,groups5)
#la classification n'est pas tout à fait la même
table(kmeans.result$cluster,groups5)
Kmeans_classes(2,scale(data))
Kmeans_classes<-function(k=5,data)
{
means.result=kmeans(scale(data),k)
return(kmeans.result$withinss/k)
}
Kmeans_classes(2,scale(data))
return(kmeans.result$tot.withinss/kmeans.result$totss)
Kmeans_classes<-function(k=5,data)
{
means.result=kmeans(scale(data),k)
return(kmeans.result$tot.withinss/kmeans.result$totss)
}
Kmeans_classes(2,scale(data))
Kmeans_classes(5,scale(data))
Kmeans_classes(2,scale(data))
Kmeans_classes(5,scale(data))
for(i in 2:10)
{
Kmeans_classes(i,scale(data))
}
res[i]=Kmeans_classes(i,scale(data))
res=rep(NA,9)
for(i in 2:10)
{
res[i]=Kmeans_classes(i,scale(data))
}
res
Kmeans_classes<-function(k,data)
{
means.result0=kmeans(scale(data),k)
return(kmeans.result0$tot.withinss/kmeans.result0$totss)
}
res=rep(NA,9)
for(i in 2:10)
{
res[i]=Kmeans_classes(i,scale(data))
}
Kmeans_classes<-function(k,data)
{
means.result0=kmeans(scale(data),k)
return(kmeans.result0$tot.withinss/kmeans.result0$totss)
}
res=rep(NA,9)
for(i in 2:10)
{
res[i]=Kmeans_classes(i,scale(data))
}
means.result0=kmeans(scale(data),k)
return(kmeans.result0$tot.withinss/kmeans.result0$totss)
Kmeans_classes<-function(k,data)
{
means.result0=kmeans(scale(data),k)
return(kmeans.result0$tot.withinss/kmeans.result0$totss)
}
res=rep(NA,9)
for(i in 2:10)
{
res[i]=Kmeans_classes(i,scale(data))
}
Kmeans_classes<-function(k,data)
{
kmeans.result0=kmeans(scale(data),k)
return(kmeans.result0$tot.withinss/kmeans.result0$totss)
}
res=rep(NA,10)
for(i in 1:10)
{
res[i]=Kmeans_classes(i,scale(data))
}
res
plot(1:10,res)
means.result=kmeans(data,nstart = 100,5)
pairs(means.result)
pairs(means.result,col=kmeans)
means.result=kmeans(data,nstart = 100,5)
pairs(means.result,col=kmeans.result$cluster)
load("chiens.rda")
head(chiens)
summary(chiens)
data=chiens[,1:6]
load("chiens.rda")
head(chiens)
summary(chiens)
str(chiens)#3 possib pour la taille
library(FactoMineR)
install.packages(FactoMineR)
library(FactoMineR)
load("chiens.rda")
head(chiens)
summary(chiens)
str(chiens)#3 possib pour la taille
dim(chiens)#27 chiens et 7 var
library(FactoMineR)
tab.dis=tab.disjonctif(data)
dim(tab.dis)
res=MCA(chiens,quali.sup = 7)#ou MCA(data)
summary(res)#Pour les valeurs propres le pourcentge n'est pas aussi eleve que pour le acp car en acm
res=MCA(chiens,quali.sup = 7)#ou MCA(data)
res$ind$coord[,1:2]
data=res$ind$coord[,1:2]
?MCZ
?MCA
plot(data,choix="ind",invisible="var",habillage=7)
plot(data,choix="ind",invisible="var",habillage=7)
acm=MCA(chiens,quali.sup = 7,graph = F)#ou MCA(data)
summary(res)#Pour les valeurs propres le pourcentge n'est pas aussi eleve que pour le acp car en acm
data=acm$ind$coord[,1:2]
plot(acm,choix="ind",invisible="var",habillage=7)
?HCPC
cah.acm<-HCPC(acm,nb.clust = 3)
par(mfrow=c(1,3))
cah.acm<-HCPC(acm,nb.clust = 3)
cah.acm
cah.acm<-HCPC(acm)
cah.acm<-HCPC(acm)
cah.acm<-HCPC(acm)
